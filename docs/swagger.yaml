basePath: /
definitions:
  CreateFieldRequest:
    properties:
      data:
        type: object
      key:
        type: string
      name:
        type: string
      primitive:
        type: string
    required:
    - key
    - primitive
    type: object
  CreateNodeRequest:
    properties:
      data:
        additionalProperties: true
        description: |-
          Data for the node. The structure of the data depends on the schema, and
          it will be validated.
        type: object
      name:
        description: Name of the node.
        example: How to write better go code
        type: string
      schemaId:
        description: ID of the schema.
        example: 507f191e810c19729de860ea
        type: string
      slug:
        description: Slug of the node, used to create URIs
        example: how-to-write-better-go-code
        type: string
      type:
        description: Type of node.
        enum:
        - scene
        - model
        - view
        type: string
    required:
    - name
    - schemaId
    - slug
    type: object
  CreateSchemaRequest:
    properties:
      name:
        type: string
      type:
        enum:
        - scene
        - nested
        type: string
    type: object
  LoginRequest:
    properties:
      email:
        example: test@test.com
        type: string
      password:
        example: test
        type: string
    required:
    - email
    - password
    type: object
  LoginResponse:
    properties:
      jwt:
        type: string
      user:
        $ref: '#/definitions/user.Entity'
    required:
    - jwt
    - user
    type: object
  MeResponse:
    properties:
      jwt:
        type: string
      user:
        $ref: '#/definitions/user.Entity'
    required:
    - jwt
    - user
    type: object
  RegisterRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  RegisterResponse:
    properties:
      jwt:
        type: string
      user:
        $ref: '#/definitions/user.Entity'
    type: object
  UpdateFieldRequest:
    properties:
      config:
        $ref: '#/definitions/primitive.Config'
      description:
        type: string
      key:
        type: string
      name:
        type: string
      primitive:
        type: string
    type: object
  UpdateNodeRequest:
    properties:
      data:
        additionalProperties: true
        type: object
      name:
        type: string
      slug:
        type: string
    type: object
  field.Entity:
    properties:
      config:
        additionalProperties: true
        type: object
      description:
        type: string
      id:
        type: string
      key:
        type: string
      name:
        type: string
      primitive:
        type: string
      schemaId:
        type: string
    required:
    - config
    - description
    - id
    - key
    - name
    - primitive
    - schemaId
    type: object
  http.createRequest:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  node.Entity:
    properties:
      data:
        additionalProperties: true
        type: object
      id:
        type: string
      name:
        type: string
      realmId:
        type: string
      schemaId:
        type: string
      slug:
        type: string
      type:
        enum:
        - scene
        - model
        - view
        type: string
      views:
        items:
          $ref: '#/definitions/node.View'
        type: array
    required:
    - data
    - id
    - name
    - realmId
    - schemaId
    - slug
    - type
    type: object
  node.View:
    properties:
      children:
        items:
          $ref: '#/definitions/node.View'
        type: array
      data:
        additionalProperties: true
        type: object
      schemaId:
        type: string
    required:
    - children
    - data
    - schemaId
    type: object
  primitive.Config:
    additionalProperties: true
    type: object
  realm.Entity:
    properties:
      authorId:
        description: Fist iteration, a realm belongs only to one user.
        type: string
      id:
        type: string
      name:
        type: string
    required:
    - authorId
    - id
    - name
    type: object
  schema.Entity:
    properties:
      authorId:
        type: string
      fields:
        items:
          $ref: '#/definitions/field.Entity'
        type: array
      id:
        type: string
      name:
        type: string
      realmId:
        type: string
      type:
        enum:
        - scene
        - model
        - view
        type: string
    required:
    - authorId
    - fields
    - id
    - name
    - realmId
    - type
    type: object
  user.Entity:
    properties:
      email:
        type: string
      id:
        type: string
    type: object
  util.HTTPError:
    properties:
      code:
        type: string
      message:
        type: string
    type: object
host: localhost:5050
info:
  contact:
    name: API Support
  description: This is a sample server Petstore server.
  license:
    name: Apache 2.0
  title: GoPress
  version: "1.0"
paths:
  /v1/auth/login:
    post:
      consumes:
      - application/json
      description: Tries to login using some credentials.
      operationId: login
      parameters:
      - description: User login with email and password
        in: body
        name: body
        schema:
          $ref: '#/definitions/LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User response and JWT
          schema:
            $ref: '#/definitions/LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HTTPError'
      summary: Tries to login using some credentials.
      tags:
      - Auth
  /v1/auth/register:
    post:
      consumes:
      - application/json
      description: Registers a new user with email and password
      operationId: register-user
      parameters:
      - description: User registration parameters
        in: body
        name: body
        schema:
          $ref: '#/definitions/RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User response and JWT
          schema:
            $ref: '#/definitions/RegisterResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HTTPError'
      summary: Registers a new user with email and password
      tags:
      - Auth
  /v1/realm:
    get:
      consumes:
      - application/json
      description: Gets all the realms accessible for the current user
      operationId: get-realms
      produces:
      - application/json
      responses:
        "200":
          description: Realms to which the current user has access
          schema:
            items:
              $ref: '#/definitions/realm.Entity'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Gets all the realms accessible for the current user
      tags:
      - Realm
    post:
      consumes:
      - application/json
      description: Creates a new realm
      operationId: create-realm
      parameters:
      - description: Realm parameters
        in: body
        name: body
        schema:
          $ref: '#/definitions/http.createRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/realm.Entity'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Creates a new realm
      tags:
      - Realm
  /v1/realm/{realmId}/node:
    get:
      consumes:
      - application/json
      description: Gets all the nodes in the given realm
      operationId: get-nodes
      parameters:
      - description: Realm ID
        in: path
        name: realmId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/node.Entity'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Gets all the nodes in the given realm
      tags:
      - Node
    post:
      consumes:
      - application/json
      description: Creates a new node
      operationId: create-node
      parameters:
      - description: Realm ID
        in: path
        name: realmId
        type: string
      - description: Node parameters
        in: body
        name: body
        schema:
          $ref: '#/definitions/CreateNodeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/node.Entity'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Creates a new node
      tags:
      - Node
  /v1/realm/{realmId}/node/{nodeId}:
    patch:
      consumes:
      - application/json
      description: Updates a node
      operationId: update-node
      parameters:
      - description: Realm ID
        in: path
        name: realmId
        type: string
      - description: Node ID
        in: path
        name: nodeId
        type: string
      - description: Node parameters
        in: body
        name: body
        schema:
          $ref: '#/definitions/UpdateNodeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/node.Entity'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Updates a node
      tags:
      - Node
  /v1/realm/{realmId}/scene:
    get:
      consumes:
      - application/json
      description: Gets a Scene by its slug
      operationId: get-scene
      parameters:
      - description: Realm ID
        in: path
        name: realmId
        type: string
      - description: Scene Slug
        in: query
        name: slug
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/node.Entity'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Gets a Scene by its slug
      tags:
      - Node
  /v1/realm/{realmId}/schema:
    get:
      consumes:
      - application/json
      description: Gets all the schemas in the given realm
      operationId: get-schemas
      parameters:
      - description: Realm ID
        in: path
        name: realmId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/schema.Entity'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Gets all the schemas in the given realm
      tags:
      - Schema
    post:
      consumes:
      - application/json
      description: Creates a new schema
      operationId: create-schema
      parameters:
      - description: Realm ID
        in: path
        name: realmId
        type: string
      - description: Schema parameters
        in: body
        name: body
        schema:
          $ref: '#/definitions/CreateSchemaRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.Entity'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Creates a new schema
      tags:
      - Schema
  /v1/realm/{realmId}/schema/{schemaId}/field:
    get:
      consumes:
      - application/json
      description: Gets all the fields of the given schema
      operationId: get-fields
      parameters:
      - description: Realm ID
        in: path
        name: realmId
        type: string
      - description: Schema ID
        in: path
        name: schemaId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/field.Entity'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Gets all the fields of the given schema
      tags:
      - Field
    post:
      consumes:
      - application/json
      description: Creates a new field
      operationId: create-field
      parameters:
      - description: Realm ID
        in: path
        name: realmId
        type: string
      - description: Schema ID
        in: path
        name: schemaId
        type: string
      - description: Field parameters
        in: body
        name: body
        schema:
          $ref: '#/definitions/CreateFieldRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/field.Entity'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Creates a new field
      tags:
      - Field
  /v1/realm/{realmId}/schema/{schemaId}/field/{fieldId}:
    delete:
      consumes:
      - application/json
      description: Deletes a field
      operationId: delete-field
      parameters:
      - description: Realm ID
        in: path
        name: realmId
        type: string
      - description: Schema ID
        in: path
        name: schemaId
        type: string
      - description: Field ID
        in: path
        name: fieldId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Deletes a field
      tags:
      - Field
    patch:
      consumes:
      - application/json
      description: Updates a field
      operationId: update-field
      parameters:
      - description: Realm ID
        in: path
        name: realmId
        type: string
      - description: Schema ID
        in: path
        name: schemaId
        type: string
      - description: Field ID
        in: path
        name: fieldId
        type: string
      - description: Field parameters
        in: body
        name: body
        schema:
          $ref: '#/definitions/UpdateFieldRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/field.Entity'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Updates a field
      tags:
      - Field
  /v1/user/me:
    get:
      consumes:
      - application/json
      description: Gets the current user and JWT
      operationId: me
      produces:
      - application/json
      responses:
        "200":
          description: User and JWT
          schema:
            $ref: '#/definitions/MeResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/util.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Gets the current user and JWT
      tags:
      - User
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
